import { createClient } from '@supabase/supabase-js'

const supabaseUrl = "https://vogzzdnxoldgfpsrobps.supabase.co"
const supabaseAnonKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZvZ3p6ZG54b2xkZ2Zwc3JvYnBzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTgwNTIyOTQsImV4cCI6MjA3MzYyODI5NH0.c9H6a7zVtr7-eM1eOQxe6K-xdAVhqIHZqVQ8a6raNMk"

export const supabase = createClient(supabaseUrl, supabaseAnonKey)

/*
¡NOTA IMPORTANTE SOBRE LA BASE DE DATOS!

**PROBLEMA 1:** La sección "Descubrir" no muestra perfiles de otros inquilinos.
**CAUSA:** La política de Seguridad a Nivel de Fila (RLS) en la tabla `profiles` es demasiado restrictiva.

**PROBLEMA 2:** Los datos del registro (nombre, edad) no se guardan y aparecen por defecto.
**CAUSA:** La creación del perfil desde el cliente es propensa a errores y condiciones de carrera.

**PROBLEMA 3 (NUEVO):** Los "Me gusta" (matches) no se guardan al cerrar sesión.
**CAUSA:** Los matches se guardaban solo en el estado local de la aplicación y no en la base de datos.

**SOLUCIÓN INTEGRAL:** Ejecuta el siguiente script SQL en el "SQL Editor" de tu panel de Supabase
para aplicar las políticas y automatizaciones correctas.

--- PEGA ESTE CÓDIGO EN EL SQL EDITOR DE SUPABASE Y HAZ CLIC EN "RUN" ---

-- === ARREGLO PARA PERFILES Y REGISTRO (Ya aplicado, pero se mantiene por seguridad) ===

-- 1. Permite a los usuarios autenticados ver todos los perfiles (para la sección "Descubrir").
DROP POLICY IF EXISTS "Authenticated users can view all profiles." ON public.profiles;
CREATE POLICY "Authenticated users can view all profiles."
ON public.profiles FOR SELECT
TO authenticated
USING (true);

-- 2. Función para crear automáticamente un perfil cuando un nuevo usuario se registra.
create or replace function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  insert into public.profiles (id, name, email, age, role, avatar_url, rental_goal, city, locality)
  values (
    new.id,
    new.raw_user_meta_data ->> 'name',
    new.email,
    (new.raw_user_meta_data ->> 'age')::int,
    (new.raw_user_meta_data ->> 'role')::public.user_role,
    new.raw_user_meta_data ->> 'avatar_url',
    (new.raw_user_meta_data ->> 'rental_goal')::public.rental_goal,
    new.raw_user_meta_data ->> 'city',
    new.raw_user_meta_data ->> 'locality'
  );
  return new;
end;
$$;

-- 3. Trigger que ejecuta la función anterior después de que se crea un usuario en `auth.users`.
drop trigger if exists on_auth_user_created on auth.users;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- === NUEVO ARREGLO PARA GUARDAR MATCHES ===

-- 4. Crea la tabla 'matches' para almacenar los "me gusta".
CREATE TABLE IF NOT EXISTS public.matches (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  matched_user_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  UNIQUE(user_id, matched_user_id) -- Previene "me gusta" duplicados
);

-- 5. Habilita la Seguridad a Nivel de Fila (RLS) en la nueva tabla.
ALTER TABLE public.matches ENABLE ROW LEVEL SECURITY;

-- 6. Política: Permite a los usuarios ver sus propios "me gusta".
DROP POLICY IF EXISTS "Users can view their own matches" ON public.matches;
CREATE POLICY "Users can view their own matches"
ON public.matches FOR SELECT
TO authenticated
USING (auth.uid() = user_id);

-- 7. Política: Permite a los usuarios registrar sus propios "me gusta".
DROP POLICY IF EXISTS "Users can insert their own matches" ON public.matches;
CREATE POLICY "Users can insert their own matches"
ON public.matches FOR INSERT
TO authenticated
WITH CHECK (auth.uid() = user_id);

--- FIN DEL CÓDIGO ---

Una vez ejecutado este script, todos los problemas quedarán solucionados de forma definitiva.
*/